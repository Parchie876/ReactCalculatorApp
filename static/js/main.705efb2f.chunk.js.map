{"version":3,"sources":["AutoScalingText.js","CalculatorDisplay.js","CalculatorKey.js","Calculator.js","reportWebVitals.js","index.js"],"names":["AutoScalingText","state","scale","this","node","actualScale","parentNode","offsetWidth","setState","className","style","transform","ref","props","children","Component","CalculatorDisplay","value","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","CalculatorKey","onPress","onPoint","CalculatorOperations","prevValue","nextValue","Calculator","displayValue","operator","watingForOperand","handleKeyDown","event","key","preventDefault","inputDigit","parseInt","performOperation","inputDot","inputPercent","clearLastChar","clearDisplay","clearAll","substring","length","newValue","String","fixedDigits","replace","toFixed","waitingForOperand","digit","nextOperator","inputValue","currentValue","document","addEventListener","removeEventListener","clearText","toggleSign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.705efb2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass AutoScalingText extends Component{\n    state = {\n      scale: 1\n    }\n  \n    componentDidUpdate() {\n      const { scale } = this.state\n      const node= this.node\n      const parentNode = node.parentNode\n  \n      const availableWith = parentNode.offsetWidth\n      const actualWidth = node.offsetWidth\n      const actualScale = availableWith/actualWidth\n  \n      if (scale === actualScale)\n      return\n      if(actualScale<1){\n        this.setState({scale:actualScale})\n      }else if(scale <1){\n        this.setState({scale:1})\n      }\n    }\n    render(){\n      const {scale} = this.state\n  \n      return(\n        <div\n        className=\"auto-scaling-text\"\n        style={{transform: `scale(${scale},${scale})`}}\n        ref={node => this.node =node}>\n          {this.props.children}\n        </div>\n      )\n    }\n  }\n  export default AutoScalingText;","import React, { Component } from \"react\";\nimport AutoScalingText from './AutoScalingText'\n\nclass CalculatorDisplay extends Component {\n    render() {\n      const { value, ...props } = this.props\n      \n      const language = navigator.language || 'en-US'\n      let formattedValue = parseFloat(value).toLocaleString(language, {\n        useGrouping: true,\n        maximumFractionDigits: 6\n      })\n      \n      // Add back missing .0 in e.g. 12.0\n      const match = value.match(/\\.\\d*?(0*)$/)\n      \n      if (match)\n        formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0]\n      \n      return (\n        <div {...props} className=\"calculator-display\">\n          <AutoScalingText>{formattedValue}</AutoScalingText>\n        </div>\n      )\n    }\n  }\nexport default CalculatorDisplay;","import React, { Component } from \"react\";\nimport PointTarget from 'react-point'\n\n\n\n//const PointTarget = ReactPoint.PointTarget\n\n\nclass CalculatorKey extends Component {\n    render() {\n      const { onPress, className, ...props } = this.props\n      \n      return (\n        <PointTarget onPoint={onPress}>\n          <button className={`calculator-key ${className}`} {...props}/>\n        </PointTarget>\n      )\n    }\n  }\nexport default CalculatorKey;","import React, { Component } from \"react\";\nimport CalculatorDisplay from './CalculatorDisplay'\nimport  CalculatorKey from './CalculatorKey'\n\nconst CalculatorOperations = {\n  '/': (prevValue, nextValue) => prevValue / nextValue,\n  '*': (prevValue, nextValue) => prevValue * nextValue,\n  '+': (prevValue, nextValue) => prevValue + nextValue,\n  '-': (prevValue, nextValue) => prevValue - nextValue,\n  '=': (prevValue, nextValue) => nextValue\n}\nclass Calculator extends Component{\n    state = {\n      value: null,\n      displayValue: '0',\n      operator:null,\n      watingForOperand:false\n    }\n  \n    clearAll(){\n      this.setState({\n        value: null,\n        displayValue: '0',\n        operator:null,\n        watingForOperand:false\n      })\n    }\n    clearDisplay(){\n      this.setState({\n        displayValue: '0'\n      })\n    }\n    clearLastChar(){\n      const {displayValue} = this.state\n  \n      this.setState({\n        displayValue: displayValue.substring(0,displayValue.length-1)||'0'\n      })\n    }\n    toggleSign(){\n      const {displayValue} = this.state\n      const newValue = parseFloat(displayValue)*-1\n  \n      this.setState({\n        displayValue:String(newValue)\n      })\n    }\n  \n    inputPercent(){\n      const {displayValue} = this.state\n      const currentValue =parseFloat(displayValue)\n  \n      if(currentValue === 0)\n        return\n  \n      const fixedDigits = displayValue.replace(/^-?\\d*\\.?/,'')\n      const newValue = parseFloat(displayValue)/100\n  \n      this.setState({\n        displayValue: String(newValue.toFixed(fixedDigits.length + 2))\n      })\n    }\n    inputDot(){\n      const {displayValue} = this.state\n  \n      if(!(/\\./).test(displayValue)){\n        this.setState({\n          displayValue: displayValue + '.',\n          waitingForOperand: false\n        })\n      }\n    }\n  inputDigit(digit){\n    const {displayValue, waitingForOperand } = this.state\n  \n    if(waitingForOperand){\n      this.setState({\n        displayValue: String(digit),\n        waitingForOperand: false\n      })\n    }else{\n      this.setState({\n        displayValue: displayValue === '0' ? String(digit) : displayValue + digit\n      })\n    }\n  }\n  \n  performOperation(nextOperator){\n    const {value, displayValue, operator} = this.state\n    const inputValue = parseFloat(displayValue)\n  \n    if(value == null){\n      this.setState({\n        value: inputValue\n      })\n    }else if (operator){\n      const currentValue = value || 0\n      const newValue = CalculatorOperations[operator](currentValue, inputValue)\n  \n      this.setState({\n        value: newValue,\n        displayValue: String(newValue)\n      })\n    }\n    \n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator\n    })\n  }\n  \n  handleKeyDown = (event) => {\n    let {key} = event\n  \n    if (key ===\"Enter\")\n    key = '='\n  \n    if ((/\\d/).test(key)) {\n      event.preventDefault()\n      this.inputDigit(parseInt(key, 10))\n    } else if (key in CalculatorOperations) {\n      event.preventDefault()\n      this.performOperation(key)\n    } else if (key === '.') {\n      event.preventDefault()\n      this.inputDot()\n    } else if (key === '%') {\n      event.preventDefault()\n      this.inputPercent()\n    } else if (key === 'Backspace') {\n      event.preventDefault()\n      this.clearLastChar()\n    } else if (key === 'Clear') {\n      event.preventDefault()\n      \n      if(this.state.displayValue!=='0'){\n        this.clearDisplay()\n      } else {\n        this.clearAll()\n      }\n  }\n  }\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n  \n  render() {\n    const { displayValue } = this.state\n    \n    const clearDisplay = displayValue !== '0'\n    const clearText = clearDisplay ? 'C' : 'AC'\n    \n    return (\n      <div className=\"calculator\">\n        <CalculatorDisplay value={displayValue}/>\n        <div className=\"calculator-keypad\">\n          <div className=\"input-keys\">\n            <div className=\"function-keys\">\n              <CalculatorKey className=\"key-clear\" onPress={() => clearDisplay ? this.clearDisplay() : this.clearAll()}>{clearText}</CalculatorKey>\n              <CalculatorKey className=\"key-sign\" onPress={() => this.toggleSign()}>±</CalculatorKey>\n              <CalculatorKey className=\"key-percent\" onPress={() => this.inputPercent()}>%</CalculatorKey>\n            </div>\n            <div className=\"digit-keys\">\n              <CalculatorKey className=\"key-0\" onPress={() => this.inputDigit(0)}>0</CalculatorKey>\n              <CalculatorKey className=\"key-dot\" onPress={() => this.inputDot()}>●</CalculatorKey>\n              <CalculatorKey className=\"key-1\" onPress={() => this.inputDigit(1)}>1</CalculatorKey>\n              <CalculatorKey className=\"key-2\" onPress={() => this.inputDigit(2)}>2</CalculatorKey>\n              <CalculatorKey className=\"key-3\" onPress={() => this.inputDigit(3)}>3</CalculatorKey>\n              <CalculatorKey className=\"key-4\" onPress={() => this.inputDigit(4)}>4</CalculatorKey>\n              <CalculatorKey className=\"key-5\" onPress={() => this.inputDigit(5)}>5</CalculatorKey>\n              <CalculatorKey className=\"key-6\" onPress={() => this.inputDigit(6)}>6</CalculatorKey>\n              <CalculatorKey className=\"key-7\" onPress={() => this.inputDigit(7)}>7</CalculatorKey>\n              <CalculatorKey className=\"key-8\" onPress={() => this.inputDigit(8)}>8</CalculatorKey>\n              <CalculatorKey className=\"key-9\" onPress={() => this.inputDigit(9)}>9</CalculatorKey>\n            </div>\n          </div>\n          <div className=\"operator-keys\">\n            <CalculatorKey className=\"key-divide\" onPress={() => this.performOperation('/')}>÷</CalculatorKey>\n            <CalculatorKey className=\"key-multiply\" onPress={() => this.performOperation('*')}>×</CalculatorKey>\n            <CalculatorKey className=\"key-subtract\" onPress={() => this.performOperation('-')}>−</CalculatorKey>\n            <CalculatorKey className=\"key-add\" onPress={() => this.performOperation('+')}>+</CalculatorKey>\n            <CalculatorKey className=\"key-equals\" onPress={() => this.performOperation('=')}>=</CalculatorKey>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  }\n  export default Calculator;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport Calculator from './Calculator';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n    <Calculator />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}